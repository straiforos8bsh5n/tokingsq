input {
    kafka{
        bootstrap_servers => "kafka1:9093,kafka2:9093"
        group_id => "debug-2es"
        topics => ["k8s-ingress-topic"]
        consumer_threads => 6
        decorate_events => true
        codec => json {
                     charset => "UTF-8"
                 }
    }
}
filter {
    json {
        source => "message"
    }
    if "_grokparsefailure" in [tags] {
        drop {}
    }
    grok{
        match => {"log" => "\[%{DATA:remote_addr}\] - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{DATA:server_protocol}\" \"%{DATA:request_method}\" \"%{DATA:uri}\" \"%{DATA:request_body}\" %{NUMBER:status} %{NUMBER:body_bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\" %{NUMBER:request_length} %{NUMBER:request_time} \[%{DATA:proxy_upstream_name}\] %{GREEDYDATA:upstream_addr} %{NUMBER:upstream_response_length} %{NUMBER:upstream_response_time} %{NUMBER:upstream_status} %{DATA:req_id} %{DATA:domain} \[%{DATA:proxy_alternative_upstream_name}\] \"%{DATA:request_filename}\""}
    }

    mutate{
        remove_field => ['log','agent','host','k8s_container_name','k8s_pod_namespace','ecs','k8s_pod','index','input','@verson','k8s_pod_namespace','topic','docker_container', 'message']
    }

    useragent {
        source => "http_user_agent"
        target => "ua"
    # 过滤useragent没用的字段
        remove_field => [ "[ua][minor]","[ua][major]","[ua][build]","[ua][patch]","[ua][os_minor]","[ua][os_major]" ]
    }
    geoip {
        source => "remote_addr"
    }
}
output{
#       stdout {
#            codec => rubydebug
#       }
# 匹配以bizlog开头的索引，适用模板，绑定common_policy策略
    elasticsearch {
        hosts => ["es.site.com:80"]
        index => "ingress_access-%{+YYYY.MM.dd}"
    }
}
